@page "/WorkScheduler/SchedulerGenerator"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities
@using WorkCalendar.Client.Data.MessageBox
@using WorkCalendar.Client.Data.Scheduler
@using WorkCalendar.Client.Data.Scheduler.SchedulerGenerator
@using WorkCalendar.Client.Data.Scheduler.SchedulerPlaces
@using WorkCalendar.Client.Data.Scheduler.SchedulerUserDefaults
@inject NavigationManager navigationManager
@inject IUserActions userActions
@inject IMessageBoxHandler messageHandler
@inject IUserLogsActions userLogsActions
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject ISchedulerDefaultHourIncomeService defaultIncomeService;
@inject ISchedulerService schedulerService;
@inject HttpClient httpClient
@inject ISchedulerPlacesService _schedulerPlacesService;
@inject ISchedulerGeneratorService _schedulerGeneratorService;

<MudCalendar Items="CalendarTasks" onchange="" CellClicked="CellClicked"  DateRangeChanged="DateRangeChanged" DayTimeInterval="CalendarTimeInterval.Minutes15">
	<CellTemplate>
		<div style="width: 100%; height: 100%; border: 2px solid @GetColor(ItemColor((SchedulerTask)context))">
			<div style="background-color: @GetColor(ItemColor((SchedulerTask)context))"><MudText Style="color: #ffffff;" Typo="Typo.body1" Align="Align.Center">@(GetCalendarItemName((SchedulerTask)context))</MudText></div>
		</div>
	</CellTemplate>
</MudCalendar>

@code
{
	string generatedUrl;
	private static List<SchedulerTask> CalendarTasks = new List<SchedulerTask>();

	private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

	protected override void OnInitialized()
	{
		var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
		var queryStrings = QueryHelpers.ParseQuery(uri.Query);
		if (queryStrings.TryGetValue("url", out var url))
			generatedUrl = url;
		uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
	}

	private Task CellClicked(DateTime dateTime)
	{
		return Task.CompletedTask;
	}

	private Task ItemClicked(CalendarItem item)
	{
		schedulerService.EditTask((SchedulerTask)item);
		return Task.CompletedTask;
	}

	private async Task DateRangeChanged(DateRange dateRange)
	{
		CalendarTasks = await _schedulerGeneratorService.GetGeneratedTasks(generatedUrl);
		StateHasChanged();
	}

	private Color ItemColor(SchedulerTask item)
	{
		if (item.TaskType == "Done")
			return Color.Success;
		if (item.TaskType == "Planned")
			return Color.Warning;
		if (item.TaskType == "Availabe")
			return Color.Info;
		if (item.TaskType == "Unavailabe")
			return Color.Error;
		return Color.Transparent;
	}

	private string GetCalendarItemName(SchedulerTask task)
		=> $"{task.Place} {task.DateStart.Hour} {task.DateEnd.Hour}";
}