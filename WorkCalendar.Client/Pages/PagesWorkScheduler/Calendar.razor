@page "/WorkScheduler/Calendar"
@using System.Net.Http.Json
@using DTOModels
@using Heron.MudCalendar
@using WorkCalendar.Client.Data.MessageBox
@using WorkCalendar.Client.Data.Scheduler
@using WorkCalendar.Client.Data.Scheduler.SchedulerPlaces
@using WorkCalendar.Client.Data.Scheduler.SchedulerUserDefaults
@using WorkCalendar.Client.Shared.Dialogs
@inject IUserActions userActions
@inject IMessageBoxHandler messageHandler
@inject IUserLogsActions userLogsActions
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject ISchedulerDefaultHourIncomeService defaultIncomeService;
@inject ISchedulerService schedulerService;
@inject HttpClient httpClient
@inject ISchedulerPlacesService _schedulerPlacesService;


<MudCalendar Items="CalendarTasks" onchange="" CellClicked="CellClicked" DateRangeChanged="DateRangeChanged" DayTimeInterval="CalendarTimeInterval.Minutes15" >
	<CellTemplate>
		<div style="width: 100%; height: 100%; border: 2px solid @GetColor(ItemColor((SchedulerTask)context))">
			<div style="background-color: @GetColor(ItemColor((SchedulerTask)context))"><MudText Style="color: #ffffff;" Typo="Typo.body1" Align="Align.Center">@(GetCalendarItemName((SchedulerTask)context))</MudText></div>
			</div>
	</CellTemplate>
</MudCalendar>

<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
	<MessageContent>
		Deleting can <b><i>not</i></b> be undone!
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
	</YesButton>
</MudMessageBox>

@code {
	private MudMessageBox mbox { get; set; }

	List<SchedulerPlaceDTO> places = new List<SchedulerPlaceDTO>();
	private double userIncome;
	private string placeFilter = "All";
	private string typeFilter = "All";
	private double minLength = 0;
	private double maxLength = 0;
	private double minBonus = 0;
	private double maxBonus = 0;
	private List<CalendarItem> calendarItems = new List<CalendarItem>();
	private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

	private static List<SchedulerTask> CalendarTasks = new List<SchedulerTask>();
	private static DateRange _currentDateRange;

	[Inject]
	private IDialogService DialogService { get; set; }

	private async Task CellClicked(DateTime dateTime)
	{
		var result = await schedulerService.AddTask(dateTime, userIncome);
		CalendarTasks = await schedulerService.GetUserTasks((DateTime)_currentDateRange.Start, (DateTime)_currentDateRange.End);

		StateHasChanged();
		//return schedulerService.AddTask(dateTime, userIncome);
	}

	private async Task ItemClicked(CalendarItem item)
	{
		await schedulerService.EditTask((SchedulerTask)item);
		await Task.CompletedTask;
	}

	private Color ItemColor(SchedulerTask item)
	{
		if (item.TaskType == "Done")
			return Color.Success;

		if (item.TaskType == "Planned")
			return Color.Warning;

		if (item.TaskType == "Availabe")
			return Color.Info;

		if (item.TaskType == "Unavailabe")
			return Color.Error;


		return Color.Transparent;
	}


	private async void DateRangeChanged(DateRange dateRange)
	{
		CalendarTasks = await schedulerService.GetUserTasks((DateTime)dateRange.Start, (DateTime)dateRange.End);
		_currentDateRange = dateRange;
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		userIncome = await defaultIncomeService.GetUserDefaultIncome();
		places = await _schedulerPlacesService.GetUserPlaces();
	}

	private void ShowPlaces()
	{
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
		var result = dialogService.Show<SchedulerPlacesDialog>("Your Places", closeOnEscapeKey);
	}

	private string GetCalendarItemName(SchedulerTask task)
	=> task.Place + " " + task.DateStart.Hour + "-" + task.DateEnd.Hour;
}
